Formatter : On Mac Shift + Option + F

Install VS code
install node version greater than 8
install yarn : npm install -g yarn

http://indecision.mead.io
http://links.mead.io/indecision

format shift + option + f

live server / express/ webpack dev server
install live server:
    yarn global add live-server
    or
    npm install -g live-server
To run liver server on public folder 
    live-server public

https://unpkg.com/react@16.0.0/umd/react.development.js
https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js

react vr : virtual reality
react native : for native app
react-dom : browser

JSX : JavaScript XML
==============================================
Babel : Javascript compiler

Install 
    Babel
    preset-env and 
    preset-react

    npm install -g babel-cli@6.24.1 
    or 
    yarn global add babel-cli@6.24.1

    yarn add babel-preset-react@6.24.1 babel-preset-env@1.5.2

 babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch

==============================================
 JSX Expressions
 
 Added Babel extenstion : 
    Babel ES6/ES7 by dzannotti and 
    Path Intellisense by christian-kohler

==============================================

Conditional Rendering in JSX

Undefined is implicitly returned if one dont return it explicitly

Ternary Operator: based on condition it used for one or another action
true ? 'VaibhaV' : 'Anonymous'
false ? 'VaibhaV' : 'Anonymous'

Logical AND Operator: if condition is true it returns value else nothing 
Much like undefined, bolean values true and false and null are ignored by the JSX. which is very useful feature.

true && 'SomeValue'
    in above output is SomeValue, i.e if first value is true next value is returned else false(and false is ignored by JSX)
==============================================
playGround:

babel src/playGround/es6-let-const.js --out-file=public/scripts/app.js --presets=env,react --watch

=========================
Arrow function:
All arrow functions are anonymous
arrow function implicitly return, hence no need to write return.
argument object - no longer bound with arrow functions */
this keyword - no longer bound with arrow functions */

=========================
Evenets and Attributes

Manual Data Binding:
JSX does not have data Binding
=========================

ES6 Classes
!'' --> gives true
!!'' --> gives false
!'VaibhaV' --> false
!!'VaibhaV' --> true
!!undefined --> false

=========================

React Component:
React component is es6 class

class className extends React.Component{
}

render(){  
}

this.props

form
    events
    methods

=========================
method Binding
In JS we loose this binding like in event handlers , bind is handy tool to bind it.

input constuctor goes as props: 
constructor(props){
    super(props);
    this.handleEvent = this.handleEvent.bind(this)
}

=========================
React Component State:

In React, Component state re-render the component when there is change in data.

Follow below steps to set compoent state:
1. Setup default state object
2. Component rendered with default state object values*
3. Change state based on event
4. Component re-rendered using new state values*
5. Start again at 3. 

=========================
Props Vs State:
1. Both are an object
2. Both can be used when Rendering
3. In both changes cause re-redering.
4. In Props changes come from above, but for state changes are defined in component itself.
5. Props cant be changed from component, but state can be changed in component itself
=========================

Stateless Functional Components

=========================
Default props:
default props are objects.
defaultProps works with both Stateless and classBased Components.
ex:
Header.defaultProps = {
    title: 'Indecision App'
}
=========================

Chrome react devtools extenstion
=========================
Remove Single btn
=========================
Lifecycle Methods:
ex: componentDidMount()
There is no way to manage lifecyle for stateless component, hence if one want to maintain lifecycle then need to use class based components.
componentDidUpdate()
componentWillUnmount()
=========================

Saving and Loading options data (Local storage)

localStorage.setItem('name', 'VaibhaV');
localStorage.getItem('name');
localStorage.removeItem('name');

localStorageonly works with string data, even number is stored as a string.

json data
json is a string representation of a javascript object or an array.

JSON.stringify : it take regular js object and give string representation
const json = JSON.stringify({age :26})

JSON.parse : it take string representation of object and give regular js object
JSON.parse(json)
JSON.parse(json).age

localStorage.clear()

=========================
Saving and Loading the Count
=========================

webpack:

It is modular bundler for modern javascript app.
Use:
Organise JavaScript 
=========================

Its better to not install tools globally
npm uninstall -g babel-cli live-server
or
yarn global remove babel-cli live server 

using scripts Locally
"scripts": {
    "serve": "live-server public/",
    "build" : "babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch"
  },
=========================
yarn add webpack@3.1.0

create a file : webpack.config.js
 console.log(__dirname);

=========================
ES6 Import Export

Create nes app.js
In webpack.config.js create  entry and output files
Create utils.js
import utils.js in app.js

Exports are of two types :
default exports 
named exports

=========================
Default export:
import isSenior, { isAdult, canDrink } from './person.js'

export {isAdult, canDrink, isSenior as default};
=========================
Importing NPM Modules
install validator package

yarn add react react-dom

import React from 'react';
import ReactDOM from 'react-dom';
=========================

Loader: Customise beviour of webpack

yarn add babel-core@6.25.0 babel-loader@7.1.1

=========================

Source Maps with Webpack
https://webpack.js.org/concepts/
cheap-module-eval-source-map

for devtool Set it in  webpack.config.js
    devtool: 'cheap-module-eval-source-map',
=========================
WebPack Dev Server
install webpack-dev-server@2.5.1
yarn add webpack-dev-server@2.5.1
for sev server Set contentBase in  webpack.config.js
    devServer : {
        contentBase: path.join(__dirname, 'public')
    }
=========================

ES6 class properties
https://babeljs.io/docs/en/

yarn add babel-plugin-transform-class-properties@6.24.1

"plugins": ["transform-class-properties"]
-------------
class OldSyntax{
    constructor(){
        this.name ='VaibhaV';
        this.getGreetings = this.getGreetings.bind(this)
    }
    getGreetings(){
        return `Hi, My name is ${this.name}!`
    }
}
const oldSyntax = new OldSyntax();
const getGreeting = oldSyntax.getGreetings
console.log(getGreeting());
-------------
class NewSyntax{
    name ='Sheetal';
    getGreetings = () => {
        return `Hi, My name is ${this.name}!`
    }
}
const newSyntax = new NewSyntax();
const newGetGreeting = newSyntax.getGreetings
console.log(newGetGreeting());
-------------
=========================

Using Third Party Component
React Modal

Passing children to component

install react-modal
yarn add react-modal@2.2.2

==========================
Setting up Webpack with SCSS:

SCSS is a preprocessor
npmjs.com/package/css-loader
npmjs.com/package/style-loader

yarn add style-loader@0.18.2  css-loader@0.28.4
Direct dependencies
├─ css-loader@3.5.3
└─ style-loader@1.2.1

{
    test: /\.scss$/,
        use: [
            'style-loader',
            'css-loader',
            'sass-loader'
        ]
}

npm uninstall sass-loader node-sass
npm install sass-loader@7.3.1 node-sass@4.13.1

--------------------
Reset that $#!
it means all browser should start fro  same place as all browssr have own settings
for this we will use normalize.css
yarn add normalize.css@7.0.0
--------------------
Theming with Variables:
--------------------
Big Button and Options List:
--------------------
styling Options List:
Use of flexbox: flex get thing in one line.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
==========================================================

React Router:

Server side routing VS Client side routing

https://reacttraining.com/react-router/

========================
React Router 101:

yarn add react-router-dom

BrowserRouter : To create new router
Route : to provide router to every single page

const routes = (
    <BrowserRouter>
        <div>
            <Route path='/' component={ExpenseDashboardPage} exact={true} />
            <Route path='/create' component={AddExpensePage} />
            <Route path='/edit' component={EditExpensePage} />
            <Route path='/help' component={HelpPage} />
        </div>
    </BrowserRouter>
)

ReactDOM.render(routes, document.getElementById('app'));
========================
Set up 404: Not found page
import Switch from react-router-dom and use instead of <div>
const routes = (
    <BrowserRouter>
        <Switch>
            <Route path='/' component={ExpenseDashboardPage} exact={true} />
            <Route path='/create' component={AddExpensePage} />
            <Route path='/edit' component={EditExpensePage} />
            <Route path='/help' component={HelpPage} />
            <Route component={NotFoundPage} />
        </Switch>
    </BrowserRouter>
)
========================
Linking Between Routes:
404!! -- <a href='/' > Go Home</a>
Instead we must use Link  from react-router-dom 
<Link to='/' > Go Home</Link>
onst Header = () => (
    <header>
        <h1>Expensify</h1>
        <h3><Link to='/' > Dashboard</Link></h3>
        <h3><Link to='/create' > Create Expense</Link></h3>
        <h3><Link to='/edit' > Edit Expense</Link></h3>
        <h3><Link to='/help' > Get Help</Link></h3>

        <NavLink to='/' activeClassName = 'is-active' exact={true}> Dashboard</NavLink>
        <NavLink to='/create' activeClassName = 'is-active' > Create Expense</NavLink>
        <NavLink to='/edit' activeClassName = 'is-active' > Edit Expense</NavLink>
        <NavLink to='/help' activeClassName = 'is-active' > Get Help</NavLink>
    </header>
)
========================

Organinsing Our Routes:
Crete Router folder --> in that create AppRouter.js, paste all code there
The create componenet folder in src, in that create individual files for each of component

========================
Query strings and URL Parameters:

http://127.0.0.1:8080/edit?query=testPage
location:
hash: ""
pathname: "/edit"
search: "?query=testPage"
state: undefined

http://127.0.0.1:8080/edit#contact-us
location:
hash: "#contact-us"
pathname: "/edit"
search: ""
state: undefined

make url dynamic:
<Route path='/edit/:id' component={EditExpensePage} />

========================
Build It: Router for Portfolio site
Portfolio App is build.

========================

Redux:
Redux is used for complex/vast codes instead of components.

Where do I store my app state in a complex React app?
How do I create components that are actually reusable?

Redux is a state container.
In redux every component can get or update dat fro redux store.
------------------------
Installing and setting up Redux:

Creating redux store:
yarn add redux
creatStore is imported only once from redux
------------------------
Dispatching Actions:
Action is an object that gets sent to the store.
------------------------
Subcribing and Dynamic Actions:

to keep continous watch on redux store- store.subscribe() is used
Return value from subscribe is actually a function we can call to unsubscribe.
const unsubscribe = store.subscribe(()=>{
    console.log(store.getState());
});
unsubscribe();
--------------------
store.dispatch({
    type: 'INCREMENT'
});

In store.dispatch() type is manadatory for action. We can add other like below:
incrementBy: 5

========================
ES6 Object and Array destructuring
========================

Refactoring and Organizing

Action Generators are functions that return action objects
========================

Reducers:
1. Reducers are pure function.
2. Never change state or action.
========================

Working with Multiple Reducers:
========================
ES6 Spread Operator in Reducers:

spread operator on Array:
npm uuid : this is used to generate unique id.
yarn add uuid

filer:
state.filter(({id}) => id !== action.id)

------------------------
spread operator on Object:

yarn add babel-plugin-transform-object-rest-spread

(babel-plugin-transform-object-rest-spread@6.26.0)

{
  "plugins": ["transform-object-rest-spread"]
}

{
    ...state,
    text: action.text
}
========================
Filtering Redux Data
single function to filter and sort the expenses data

timstamps: are in miliseconds
0 means = January 1st 1978 (unix epoch)
+ means after 0, -menas before 0.
ex: 3456, -7654, 10, 0

find string:
expense.description.toLowerCase().includes(text.toLowerCase());
========================
Sorting Redux Data

========================
React With Redux:

Organinzing Redux:
========================

Higher Order Components: hoc:
A component that renders another component.
Reuse code
Render Hijacking
Prop manipulation
Abstract state

========================

Connection Store and Component with React-Redux

yarn add react-redux
react-redux@7.2.0

https://react-redux.js.org/introduction/quick-start
https://github.com/reduxjs/react-redux
React Redux provides <Provider />, which makes the Redux store available to the rest of your app:
React Redux provides a connect function for you to connect your component to the store.
========================
Rendering Indivisual expenses
========================
Controlled Inputs for Filters:
========================
DropDown By Picking SortBy:
========================
Creating Expense Add/Edit form:
Regex101.com
/^\d*(\.\d{0,2})?$/

onAmountChange = (e) => {
        const amount = e.target.value;
        if (amount.match(/^\d*(\.\d{0,2})?$/)) {
            this.setState(() => ({ amount }));
        }
    }
========================
Setting up Date Picker:
momentjs.com
airbnb react-dates
http://airbnb.io/react-dates

yarn add moment@2.18.1 react-dates@12.7.0 react-addons-shallow-compare@15.6.0
========================
Wiring up Add Expense:
========================
Wiring up Edit Expense:
========================
Redux Dev Tools:
https://github.com/facebook/react/tree/master/packages/react-devtools#the-react-tab-doesnt-show-up
https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en
========================
Filtering by Dates:
========================